# If you come from bash you might have to change your $PATH.
export PATH=/opt/homebrew/bin:/opt/homebrew/sbin:$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
# ZSH_THEME="half-life"
ZSH_THEME="mortalscumbag"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder


# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
	git
	zsh-autosuggestions
	zsh-syntax-highlighting
)

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Sources bash OSC7 integration for wezterm
# source "/Users/jkelly/.wezterm_osc.sh"

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/jkelly/google-cloud-sdk/path.zsh.inc' ]; then . '/Users/jkelly/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/jkelly/google-cloud-sdk/completion.zsh.inc' ]; then . '/Users/jkelly/google-cloud-sdk/completion.zsh.inc'; fi

# gcloud credentials
export GOOGLE_APPLICATION_CREDENTIALS=$HOME/.config/gcloud/application_default_credentials.json

eval "$(/opt/homebrew/bin/brew shellenv)"

export VISUAL='hx'
export EDITOR='hx'

# Set SSH Key
export GITHUB_SSH_KEY=$(cat ~/.ssh/id_ed25519)

## Go local Dev needs
export GOPATH=$HOME/go
export GOBIN=$GOPATH/bin
export PATH=$PATH:$GOPATH/bin
export GOOS=darwin
export GOARCH=arm64
export GOPRIVATE=github.com/urbn

# Set protobufs
export PATH="$PATH:/Users/jkelly/go/bin/protoc-gen-gofast"

# Python local dev needs
export PYENV_ROOT="$HOME/.pyenv"
command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"

# OpenSSL Setup
export PATH="/opt/homebrew/opt/openssl@1.1/bin:$PATH"
export LDFLAGS="-L/opt/homebrew/opt/openssl@1.1/lib"
export CPPFLAGS="-I/opt/homebrew/opt/openssl@1.1/include"

# GRPC Setup
export GRPC_PYTHON_BUILD_SYSTEM_ZLIB=1
export GRPC_PYTHON_BUILD_SYSTEM_OPENSSL=1

# Rust Setup
export CARGO_NET_GIT_FETCH_WITH_CLI=true

# libxmlsec1 Setup
export CPPFLAGS="$CPPFLAGS -DXMLSEC_NO_XKMS=1"

# libpq Setup
export PATH="/opt/homebrew/opt/libpq/bin:$PATH"
export LDFLAGS="$LDFLAGS -L/opt/homebrew/opt/libpq/lib"
export CPPFLAGS="$CPPFLAGS -I/opt/homebrew/opt/libpq/include"
export PKG_CONFIG_PATH="/opt/homebrew/opt/libpq/lib/pkgconfig"

# readline Setup
export LDFLAGS="$LDFLAGS -L/opt/homebrew/opt/readline/lib"
export CPPFLAGS="$CPPFLAGS -I/opt/homebrew/opt/readline/include"
export PKG_CONFIG_PATH="$PKG_CONFIG_PATH:/opt/homebrew/opt/readline/lib/pkgconfig"

# sqlite3 Setup
export PATH="/opt/homebrew/opt/sqlite/bin:$PATH"
export LDFLAGS="$LDFLAGS -L/opt/homebrew/opt/sqlite/lib"
export CPPFLAGS="$CPPFLAGS -I/opt/homebrew/opt/sqlite/include"
export PKG_CONFIG_PATH="$PKG_CONFIG_PATH:/opt/homebrew/opt/sqlite/lib/pkgconfig"

# zlib Setup
export LDFLAGS="$LDFLAGS -L/opt/homebrew/opt/zlib/lib"
export CPPFLAGS="$CPPFLAGS -I/opt/homebrew/opt/zlib/include"
export PKG_CONFIG_PATH="$PKG_CONFIG_PATH:/opt/homebrew/opt/zlib/lib/pkgconfig"

# xml Setup
export PATH="/opt/homebrew/opt/libxml2/bin:$PATH"
export LDFLAGS="$LDFLAGS -L/usr/local/opt/libxml2/lib"
export CPPFLAGS="$CPPFLAGS -I/usr/local/opt/libxml2/include"
export PKG_CONFIG_PATH="$PKG_CONFIG_PATH:/usr/local/opt/libxml2/lib/pkgconfig"

# pycurl Setup
PYCURL_SSL_LIBRARY=openssl

# improve cbuild performance
COMPOSE_BAKE=true

# ruby/rbenv
# Added by `rbenv init` on Sat Apr 12 16:46:02 EDT 2025
eval "$(rbenv init - --no-rehash zsh)"

source $ZSH/oh-my-zsh.sh

# Init zellij
if [[ -z "$ZELLIJ" ]] && [[ -z "$SSH_CONNECTION"  ]] && [[ "$TERM_PROGRAM" != "vscode" ]]  ; then
  if [[ "$ZELLIJ_AUTO_ATTACH" == "true" ]]; then
      zellij attach -c
  else
  	eval "$(zellij setup --generate-auto-start zsh)"
  	eval "$(zellij setup --generate-completion zsh)"
  fi

  if [[ "$ZELLIJ_AUTO_EXIT" == "TRUE" ]]; then
      exit
  fi
fi
# Init starship prompt
eval "$(starship init zsh)"

